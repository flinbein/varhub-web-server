import type { Hub } from "@flinbein/varhub";
import { timingSafeEqual } from "node:crypto";
import type {JsonSchemaToTsProvider} from "@fastify/type-provider-json-schema-to-ts";
import type { FastifyPluginCallback } from "fastify/types/plugin.js";
import {parse, serialize} from "@flinbein/xjmapper";
import { requestContext } from '@fastify/request-context';
import { IsolatedVMController } from "@flinbein/varhub-controller-isolated-vm";

export const jsonList = (varhub: Hub): FastifyPluginCallback => async (fastify) => {
	
	fastify.withTypeProvider<JsonSchemaToTsProvider>().post(
		'/json/list',
		async (request, reply) => {
			return reply.redirect( "/json/list", 308);
		}
	);
	
	fastify.withTypeProvider<JsonSchemaToTsProvider>().route({
		method: 'GET',
		url: '/json/list',
		handler(request, reply){
			const result = [];
			const host = request.headers.host ?? "localhost:9999";
			for (let roomId of varhub.getRooms()) {
				const room = varhub.getRoom(roomId);
				if (!room) continue;
				const inspectorKey: string = (room as any)[Symbol.for("varhub:inspector_key")];
				if (!inspectorKey) continue;
				const connectionDesc = {
					"description": room?.publicMessage,
					"devtoolsFrontendUrl": `/devtools/inspector.html?ws=${host}/room/${roomId}/inspector/${inspectorKey}`,
					"id": roomId,
					"title": `${roomId} - ${room.publicMessage}`,
					"type": "v8",
					"url": `ws://${host}/room/${roomId}`,
					"webSocketDebuggerUrl": `ws://${host}/room/${roomId}/inspect/${inspectorKey}`
				};
				result.push(connectionDesc);
			}
			return reply.type("application/json").code(200).send(result);
		},
	});
}